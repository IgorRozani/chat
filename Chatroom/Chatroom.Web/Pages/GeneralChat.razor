@page "/general"
@using Chatroom.Core.Hubs
@using Chatroom.Core.Stocks
@using Chatroom.Web.Model
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStockBot stockBot
@attribute [Authorize]

<PageTitle>General Chat</PageTitle>

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr />

<ul id="messageList">
    @foreach (var message in messages.OrderByDescending(m => m.SentDate).Take(50))
    {
        <li>@message.Text</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat-general")).Build();
        hubConnection.On<string, string, DateTime>("ReceiveMessage", (user, message, time) =>
        {
            messages.Add(new ChatMessage { SentDate = time, Text = $"{user} {time:g}: {message}" });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (string.IsNullOrEmpty(messageInput))
            return;

        if (hubConnection is not null)
        {
            if (messageInput.StartsWith("/stock"))
            {
                var stockCode = messageInput.Split('=').LastOrDefault();
                var message = stockBot.GetStock(stockCode);
                var date = DateTime.Now;
                messages.Add(new ChatMessage { SentDate = date, Text = $"Stock bot {date:g}: {message}" });
            }
            else
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User?.Identity?.Name;
                await hubConnection.SendAsync("SendMessage", user, messageInput, DateTime.Now);
            }
        }

        messageInput = string.Empty;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}